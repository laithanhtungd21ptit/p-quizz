import React, { useState, useEffect } from 'react';
import RankingTable from '../components/RankingTable';
import Chat from "../components/Chat";
import { getRoomRanking, getNextQuestion, getRoomParticipants } from '../services/api';

export default function PlayRoomForController() {
  // State cho WebSocket
  const [stompClient, setStompClient] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  
  // L·∫•y m√£ ph√≤ng t·ª´ localStorage
  const getJoinCodeFromStorage = () => {
    const currentRoom = localStorage.getItem('currentRoom');
    if (currentRoom) {
      const roomData = JSON.parse(currentRoom);
      return roomData.pinCode || 'Kh√¥ng c√≥ m√£ ph√≤ng';
    }
    return 'Kh√¥ng c√≥ m√£ ph√≤ng';
  };

  const [joinCode, setJoinCode] = useState('ƒêang t·∫£i...');
  const [rankingData, setRankingData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showRanking, setShowRanking] = useState(false);
  const [currentQuestionTime, setCurrentQuestionTime] = useState(0);
  const [showNextQuestionButton, setShowNextQuestionButton] = useState(false);
  const [currentQuestion, setCurrentQuestion] = useState(null);
  const [timeLeft, setTimeLeft] = useState(0);
  const [isQuestionActive, setIsQuestionActive] = useState(false);
  const [timerFinished, setTimerFinished] = useState(false);
  const [totalQuestionsFromBackend, setTotalQuestionsFromBackend] = useState(null);
  const [currentQuestionNumber, setCurrentQuestionNumber] = useState(1); // Track s·ªë c√¢u h·ªèi hi·ªán t·∫°i
  
  const getRoomIdFromJoinCode = () => {
    const currentRoom = localStorage.getItem('currentRoom');
    if (currentRoom) {
      const roomData = JSON.parse(currentRoom);
        return roomData.roomId;
    }
    return null;
  };

  // Thi·∫øt l·∫≠p WebSocket connection
  const setupWebSocket = () => {
    console.log('üîå Thi·∫øt l·∫≠p WebSocket connection...');
    
    // S·ª≠ d·ª•ng SockJS v√† STOMP
    const socket = new window.SockJS('http://localhost:8080/ws');
    const client = window.Stomp.over(socket);
    
    // Disable STOMP debug logging
    client.debug = null;
    
    // L·∫•y clientSessionId v√† pinCode ƒë·ªÉ authenticate WebSocket
    const currentRoom = localStorage.getItem('currentRoom');
    let connectHeaders = {};
    
    if (currentRoom) {
      const roomData = JSON.parse(currentRoom);
      if (roomData.clientSessionId) {
        connectHeaders.clientSessionId = roomData.clientSessionId;
      }
      if (roomData.pinCode) {
        connectHeaders.pinCode = roomData.pinCode;
      }
    }
    
    console.log('üîå Connecting WebSocket with headers:', connectHeaders);
    
    client.connect(connectHeaders, (frame) => {
      console.log('‚úÖ WebSocket connected successfully with authentication!');
      setIsConnected(true);
      setStompClient(client);
      
      // L∆∞u v√†o window ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
      window.stompClient = client;
      
      // Subscribe v√†o topic ƒë·ªÉ nh·∫≠n c√¢u h·ªèi ƒë·∫ßu ti√™n t·ª´ WaitingRoom
      const roomId = getRoomIdFromJoinCode();
      console.log('üîç Debug Controller WebSocket setup:', {
        roomId: roomId,
        joinCode: joinCode,
        hasRoomId: !!roomId
      });
      
      if (roomId) {
        console.log('üì° Controller subscribing to topic: /topic/room/' + roomId);
        client.subscribe(`/topic/room/${roomId}`, (message) => {
          try {
            const data = JSON.parse(message.body);
            console.log('üì® Nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ WebSocket:', data);
            
            // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi kh√¥ng
            if (data.id && (data.content || data.answerA)) {
              console.log('üéØ CONTROLLER nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi:', {
                questionId: data.id,
                content: data.content,
                limitedTime: data.limitedTime,
                totalQuestions: data.totalQuestions,
                timestamp: new Date().toISOString()
              });
              
              // L∆∞u totalQuestions t·ª´ backend n·∫øu c√≥
              if (data.totalQuestions) {
                setTotalQuestionsFromBackend(data.totalQuestions);
                console.log('üìä Controller - Total questions t·ª´ backend:', data.totalQuestions);
              }
              
              // Ch·ªâ l∆∞u v√† setup countdown, KH√îNG hi·ªÉn th·ªã UI c√¢u h·ªèi
              localStorage.setItem('currentQuestionData', JSON.stringify(data));
              
                      // Setup countdown timer v·ªõi th·ªùi gian t·ª´ backend  
              const questionTime = data.limitedTime || 30;
        
        console.log('üîç Controller WebSocket Timer Setup:', {
          receivedLimitedTime: data.limitedTime,
          fallbackTime: 30,
          finalQuestionTime: questionTime,
          hasLimitedTimeFromBackend: !!data.limitedTime,
          currentTimerProtected: window.correctTimerSet === true
        });
        
        // ‚úÖ PROTECTION: Ch·ªâ setup timer n·∫øu ch∆∞a c√≥ timer protected
        if (!window.correctTimerSet) {
          setTimeLeft(questionTime);
          setIsQuestionActive(true);
          setTimerFinished(false);
          console.log('‚úÖ Controller WebSocket timer setup:', questionTime, 'gi√¢y');
        } else {
          console.log('üõ°Ô∏è Timer protected - kh√¥ng override WebSocket timer');
        }
        
        // C·∫≠p nh·∫≠t s·ªë c√¢u h·ªèi hi·ªán t·∫°i t·ª´ WebSocket message
        if (data.currentQuestion) {
          setCurrentQuestionNumber(data.currentQuestion);
          console.log('üìä Controller set question number t·ª´ WebSocket:', data.currentQuestion);
        } else {
          // Fallback: set v·ªÅ c√¢u s·ªë 1 n·∫øu kh√¥ng c√≥ th√¥ng tin
          setCurrentQuestionNumber(1);
          console.log('üìä Controller fallback set question number to 1');
        }
              
              // ·∫®n ranking v√† n√∫t khi c√≥ c√¢u h·ªèi m·ªõi
              setShowRanking(false);
              setShowNextQuestionButton(false);
              
        console.log('‚è∞ Controller ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi t·ª´ WebSocket:', {
          questionTime: questionTime,
          limitedTimeFromBackend: data.limitedTime,
          currentQuestionNumber: data.currentQuestion || 1,
          isTimerSetupSuccess: true
        });
            }
          } catch (error) {
            console.error('‚ùå L·ªói khi parse d·ªØ li·ªáu WebSocket:', error);
          }
        });
        
        // üìä Subscribe v√†o ranking updates real-time t·ª´ Kafka
        const rankingTopic = `/topic/room/${roomId}/ranking`;
        console.log('üìä Debug ranking subscription:', {
          roomId: roomId,
          rankingTopic: rankingTopic,
          clientConnected: client.connected
        });
        
        client.subscribe(rankingTopic, (message) => {
          console.log('=== üìä CONTROLLER RANKING UPDATE RECEIVED ===');
          console.log('üì® Raw ranking message:', message.body);
          
          try {
            const rankingDataFromSocket = JSON.parse(message.body);
            console.log('üìä Controller real-time ranking update:', rankingDataFromSocket);
            
            // C·∫≠p nh·∫≠t ranking ngay l·∫≠p t·ª©c cho controller
            setRankingData(rankingDataFromSocket);
            setLoading(false);
            
            // ‚úÖ KH√îNG C·∫¶N l∆∞u finalRankingData - GameResult s·∫Ω g·ªçi API
            console.log('üìä [Controller WebSocket] Real-time ranking updated (kh√¥ng l∆∞u localStorage)');
            
          } catch (error) {
            console.error('‚ùå Controller error parsing ranking update:', error);
          }
        });
        
        console.log('‚úÖ Controller ƒë√£ subscribe v√†o c·∫£ 2 topics cho room:', roomId);
      } else {
        console.error('‚ùå Controller kh√¥ng c√≥ roomId ƒë·ªÉ subscribe WebSocket topics!');
        console.error('üìä Debug currentRoom data:', localStorage.getItem('currentRoom'));
      }
      
    }, (error) => {
      console.error('‚ùå WebSocket connection error:', error);
      setIsConnected(false);
    });
  };

  // L·∫•y b·∫£ng x·∫øp h·∫°ng t·ª´ backend
  const fetchRanking = async () => {
    try {
      const roomId = getRoomIdFromJoinCode();
      if (roomId) {
        console.log('üîÑ L·∫•y b·∫£ng x·∫øp h·∫°ng cho ph√≤ng:', roomId);
        const response = await getRoomRanking(roomId);
        setRankingData(response);
        setLoading(false);
        console.log('üìä B·∫£ng x·∫øp h·∫°ng t·ª´ backend:', response);
        console.log('üìä S·ªë l∆∞·ª£ng participants:', response.length);
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng:', error);
      setLoading(false);
    }
  };

  // T·∫°o b·∫£ng x·∫øp h·∫°ng ban ƒë·∫ßu v·ªõi ƒëi·ªÉm 0 t·ª´ API
  const createInitialRanking = async () => {
    console.log('T·∫°o b·∫£ng x·∫øp h·∫°ng ban ƒë·∫ßu t·ª´ API...');
    
    try {
      const roomId = getRoomIdFromJoinCode();
      if (roomId) {
        console.log('üîç RoomId ƒë·ªÉ g·ªçi API:', roomId);
        
        // G·ªçi API ƒë·ªÉ l·∫•y b·∫£ng x·∫øp h·∫°ng ban ƒë·∫ßu
        const response = await getRoomRanking(roomId);
        console.log('üìä API response:', response);
        
        if (response && Array.isArray(response) && response.length > 0) {
          // N·∫øu API tr·∫£ v·ªÅ d·ªØ li·ªáu h·ª£p l·ªá, s·ª≠ d·ª•ng lu√¥n
          setRankingData(response);
          setLoading(false);
          console.log('‚úÖ S·ª≠ d·ª•ng b·∫£ng x·∫øp h·∫°ng t·ª´ API:', response);
          return;
        } else {
          console.log('‚ö†Ô∏è API tr·∫£ v·ªÅ r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá, th·ª≠ l·∫•y participants...');
          
          // Th·ª≠ l·∫•y participants t·ª´ API thay v√¨ t·∫°o d·ªØ li·ªáu m·∫´u
          try {
            const participants = await getRoomParticipants(roomId);
            console.log('üë• Participants t·ª´ API:', participants);
            
            if (participants && Array.isArray(participants) && participants.length > 0) {
              // L·ªçc b·ªè host v√† t·∫°o ranking t·ª´ participants th·ª±c t·∫ø v·ªõi ƒëi·ªÉm 0
              const playersOnly = participants.filter(participant => !participant.isHost);
              const realRanking = playersOnly.map((participant, index) => ({
                id: participant.id || participant.userId || index + 1,
                firstName: participant.firstname || participant.firstName || participant.username || participant.name || `User${index + 1}`,
                avatar: participant.avatar || `/avatar/avatar_${(index % 5) + 1}.png`,
                score: 0,
                correctCount: 0,
                ranking: index + 1
              }));
              
              setRankingData(realRanking);
              setLoading(false);
              console.log('‚úÖ T·∫°o ranking t·ª´ participants th·ª±c t·∫ø:', realRanking);
              return;
            }
          } catch (participantsError) {
            console.error('‚ùå L·ªói khi l·∫•y participants t·ª´ API:', participantsError);
          }
          
          // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c g√¨ t·ª´ API, m·ªõi t·∫°o fallback
          console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API, t·∫°o fallback...');
          createFallbackRanking();
        }
      } else {
        console.log('‚ùå Kh√¥ng c√≥ roomId, t·∫°o fallback...');
        createFallbackRanking();
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng ban ƒë·∫ßu:', error);
      console.log('‚ö†Ô∏è Fallback: t·∫°o b·∫£ng x·∫øp h·∫°ng t·ª´ participants...');
      createFallbackRanking();
    }
  };

  // T·∫°o b·∫£ng x·∫øp h·∫°ng fallback t·ª´ participants trong localStorage ho·∫∑c API
  const createFallbackRanking = async () => {
    console.log('T·∫°o b·∫£ng x·∫øp h·∫°ng fallback t·ª´ participants...');
    
    try {
      // Th·ª≠ l·∫•y participants t·ª´ localStorage tr∆∞·ªõc
      const currentRoom = localStorage.getItem('currentRoom');
      if (currentRoom) {
        const roomData = JSON.parse(currentRoom);
        console.log('üè† Room data t·ª´ localStorage:', roomData);
        
        if (roomData.participants && Array.isArray(roomData.participants) && roomData.participants.length > 0) {
          console.log('üë• Participants t·ª´ localStorage:', roomData.participants);
          
          // L·ªçc b·ªè host kh·ªèi b·∫£ng x·∫øp h·∫°ng
          const playersOnly = roomData.participants.filter(participant => !participant.isHost);
          const fallbackRanking = playersOnly.map((participant, index) => ({
            id: participant.id || participant.userId || index + 1,
            firstName: participant.firstname || participant.firstName || participant.username || participant.name || `User${index + 1}`,
            avatar: participant.avatar || `/avatar/avatar_${(index % 5) + 1}.png`,
            score: 0,
            correctCount: 0,
            ranking: index + 1
          }));
          
          setRankingData(fallbackRanking);
          setLoading(false);
          console.log('‚úÖ B·∫£ng x·∫øp h·∫°ng fallback t·ª´ localStorage:', fallbackRanking);
          return;
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng c√≥ participants trong localStorage ho·∫∑c kh√¥ng h·ª£p l·ªá');
        }
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ currentRoom trong localStorage');
      }
      
      // N·∫øu kh√¥ng c√≥ trong localStorage, th·ª≠ g·ªçi API participants
      const roomId = getRoomIdFromJoinCode();
      if (roomId) {
        console.log('üîÑ Th·ª≠ l·∫•y participants t·ª´ API v·ªõi roomId:', roomId);
        
        try {
          const participants = await getRoomParticipants(roomId);
          console.log('üë• Participants t·ª´ API:', participants);
          
          if (participants && Array.isArray(participants) && participants.length > 0) {
            const fallbackRanking = participants.map((participant, index) => ({
              id: participant.id || participant.userId || index + 1,
              firstName: participant.firstName || participant.username || participant.name || `User${index + 1}`,
              avatar: participant.avatar || `/avatar/avatar_${(index % 5) + 1}.png`,
              score: 0,
              correctCount: 0,
              ranking: index + 1
            }));
            
            setRankingData(fallbackRanking);
            setLoading(false);
            console.log('‚úÖ B·∫£ng x·∫øp h·∫°ng fallback t·ª´ API participants:', fallbackRanking);
            return;
          } else {
            console.log('‚ö†Ô∏è API participants tr·∫£ v·ªÅ r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá');
          }
        } catch (apiError) {
          console.error('‚ùå L·ªói khi g·ªçi API participants:', apiError);
        }
      } else {
        console.log('‚ö†Ô∏è Kh√¥ng c√≥ roomId ƒë·ªÉ g·ªçi API participants');
      }
      
      // Fallback cu·ªëi c√πng: ch·ªâ t·∫°o b·∫£ng m·∫´u khi th·ª±c s·ª± kh√¥ng c√≥ d·ªØ li·ªáu
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ª±c t·∫ø, t·∫°o b·∫£ng m·∫´u c∆° b·∫£n...');
      const basicRanking = [
        { id: 1, firstName: 'Ch∆∞a c√≥ ng∆∞·ªùi ch∆°i', avatar: '/avatar/avatar_1.png', score: 0, correctCount: 0, ranking: 1 }
      ];
      setRankingData(basicRanking);
      setLoading(false);
      console.log('üìù B·∫£ng x·∫øp h·∫°ng m·∫´u c∆° b·∫£n:', basicRanking);
      
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o fallback ranking:', error);
      
      // Fallback cu·ªëi c√πng khi c√≥ l·ªói
      const basicRanking = [
        { id: 1, firstName: 'L·ªói t·∫£i d·ªØ li·ªáu', avatar: '/avatar/avatar_1.png', score: 0, correctCount: 0, ranking: 1 }
      ];
      setRankingData(basicRanking);
      setLoading(false);
      console.log('üìù B·∫£ng x·∫øp h·∫°ng m·∫´u khi c√≥ l·ªói:', basicRanking);
    }
  };

  // Refresh b·∫£ng x·∫øp h·∫°ng t·ª´ API
  const refreshRanking = async () => {
    console.log('üîÑ Refresh b·∫£ng x·∫øp h·∫°ng t·ª´ API...');
    setLoading(true);
    
    try {
      const roomId = getRoomIdFromJoinCode();
      if (roomId) {
        console.log('üîç Refresh ranking cho roomId:', roomId);
        const response = await getRoomRanking(roomId);
        
        if (response && Array.isArray(response) && response.length > 0) {
          setRankingData(response);
          console.log('‚úÖ Refresh th√†nh c√¥ng t·ª´ API:', response);
        } else {
          console.log('‚ö†Ô∏è API tr·∫£ v·ªÅ r·ªóng, th·ª≠ l·∫•y participants...');
          // Th·ª≠ l·∫•y participants n·∫øu ranking r·ªóng
          const participants = await getRoomParticipants(roomId);
          if (participants && Array.isArray(participants) && participants.length > 0) {
            const realRanking = participants.map((participant, index) => ({
              id: participant.id || participant.userId || index + 1,
              firstName: participant.firstName || participant.username || participant.name || `User${index + 1}`,
              avatar: participant.avatar || `/avatar/avatar_${(index % 5) + 1}.png`,
              score: 0,
              correctCount: 0,
              ranking: index + 1
            }));
            setRankingData(realRanking);
            console.log('‚úÖ Refresh t·ª´ participants:', realRanking);
          }
        }
      } else {
        console.log('‚ùå Kh√¥ng c√≥ roomId ƒë·ªÉ refresh');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi refresh ranking:', error);
    } finally {
      setLoading(false);
    }
  };

  // L·∫•y th·ªùi gian c√¢u h·ªèi hi·ªán t·∫°i t·ª´ Redis ho·∫∑c localStorage
  const getCurrentQuestionTime = () => {
    const currentRoom = localStorage.getItem('currentRoom');
    if (currentRoom) {
      const roomData = JSON.parse(currentRoom);
      // Gi·∫£ s·ª≠ th·ªùi gian c√¢u h·ªèi m·∫∑c ƒë·ªãnh l√† 30s, c√≥ th·ªÉ l·∫•y t·ª´ backend
      return roomData.questionTime || 30;
    }
    return 30; // M·∫∑c ƒë·ªãnh 30 gi√¢y
  };

  // G·ª≠i c√¢u h·ªèi cho player qua WebSocket ho·∫∑c localStorage
  const sendQuestionToPlayers = (questionData, roomId) => {
    console.log('üì° Controller g·ª≠i c√¢u h·ªèi cho ng∆∞·ªùi ch∆°i...');
    console.log('üè† RoomId:', roomId);
    console.log('üéØ Question data:', {
      id: questionData.id,
      content: questionData.content,
      limitedTime: questionData.limitedTime,
      questionLast: questionData.questionLast
    });
    
    // G·ª≠i c√¢u h·ªèi qua WebSocket topic c·ªßa ph√≤ng
    if (window.stompClient && window.stompClient.connected) {
      const roomTopic = `/topic/room/${roomId}`;
      console.log('üì° G·ª≠i ƒë·∫øn WebSocket topic:', roomTopic);
      
      const messageToSend = {
        type: 'NEXT_QUESTION',
        data: questionData,
        timestamp: new Date().toISOString()
      };
      
      console.log('üì§ Message ƒë∆∞·ª£c g·ª≠i:', messageToSend);
      
      window.stompClient.send(roomTopic, {}, JSON.stringify(messageToSend));
      
      console.log('‚úÖ Controller ƒë√£ g·ª≠i c√¢u h·ªèi qua WebSocket th√†nh c√¥ng');
    } else {
      console.error('‚ùå WebSocket kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i c√¢u h·ªèi cho ng∆∞·ªùi ch∆°i!');
      console.error('üîç WebSocket state:', {
        stompClient: !!window.stompClient,
        connected: window.stompClient?.connected
      });
      
      // Fallback: G·ª≠i qua localStorage ƒë·ªÉ PlayerGame c√≥ th·ªÉ nh·∫≠n ƒë∆∞·ª£c
      localStorage.setItem('nextQuestionData', JSON.stringify(questionData));
      localStorage.setItem('questionUpdated', 'true');
      console.log('üíæ Fallback: ƒë√£ l∆∞u c√¢u h·ªèi v√†o localStorage');
    }
  };

  // X·ª≠ l√Ω khi b·∫•m n√∫t "C√¢u ti·∫øp theo"
  const handleNextQuestion = async () => {
    try {
      console.log('Controller b·∫•m n√∫t C√¢u ti·∫øp theo');
      
      // L·∫•y th√¥ng tin user hi·ªán t·∫°i
      const userStr = localStorage.getItem('user');
      const currentUser = userStr ? JSON.parse(userStr) : null;
      console.log('=== USER INFO DEBUG ===');
      console.log('Current user from localStorage:', currentUser);
      console.log('User fields:', {
        id: currentUser?.id,
        username: currentUser?.username,
        firstname: currentUser?.firstname,
        firstName: currentUser?.firstName,
        name: currentUser?.name
      });
      
      // L·∫•y danh s√°ch participants t·ª´ localStorage
      const currentRoomStr = localStorage.getItem('currentRoom');
      if (!currentRoomStr) {
        alert('Kh√¥ng c√≥ th√¥ng tin ph√≤ng. Vui l√≤ng quay l·∫°i trang ch·ªù.');
        return;
      }
      
      const currentRoom = JSON.parse(currentRoomStr);
      const participants = currentRoom.participants || [];
      console.log('=== PARTICIPANTS DEBUG ===');
      console.log('Participants from localStorage:', participants);
      console.log('Host participants:', participants.filter(p => p.isHost));
      
      // Ki·ªÉm tra xem user hi·ªán t·∫°i c√≥ ph·∫£i host kh√¥ng
      const isCurrentUserHost = participants.some(p => {
        if (!p.isHost) return false;
        
        // So s√°nh nhi·ªÅu tr∆∞·ªùng ƒë·ªÉ t√¨m match
        const usernameMatch = p.username === currentUser?.username;
        const firstnameMatch = p.firstname === currentUser?.firstname;
        const firstNameMatch = p.firstName === currentUser?.firstName;
        const idMatch = p.id === currentUser?.id;
        
        // So s√°nh username v·ªõi firstname (tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát)
        const usernameFirstnameMatch = p.firstname === currentUser?.username;
        const firstnameUsernameMatch = p.username === currentUser?.firstname;
        
        console.log(`Checking participant ${p.firstname || p.username}:`, {
          participant: p,
          usernameMatch,
          firstnameMatch,
          firstNameMatch,
          idMatch,
          usernameFirstnameMatch,
          firstnameUsernameMatch,
          isHost: p.isHost,
          finalMatch: usernameMatch || firstnameMatch || firstNameMatch || idMatch || usernameFirstnameMatch || firstnameUsernameMatch
        });
        
        return usernameMatch || firstnameMatch || firstNameMatch || idMatch || usernameFirstnameMatch || firstnameUsernameMatch;
      });
    
      if (!isCurrentUserHost) {
        console.error('‚ùå User hi·ªán t·∫°i kh√¥ng ph·∫£i l√† ch·ªß ph√≤ng!');
        alert('Ch·ªâ ch·ªß ph√≤ng m·ªõi c√≥ th·ªÉ chuy·ªÉn c√¢u h·ªèi ti·∫øp theo.');
        return;
      }
      
      console.log('‚úÖ User x√°c minh l√† ch·ªß ph√≤ng, ti·∫øp t·ª•c g·ªçi API...');
      
      // L·∫•y pinCode v√† clientSessionId t·ª´ currentRoom ƒë√£ c√≥
      const pinCode = currentRoom.pinCode;
      
      // L·∫•y clientSessionId t·ª´ user hi·ªán t·∫°i ho·∫∑c t·∫°o m·ªõi
      let clientSessionId = currentUser?.clientSessionId;
      if (!clientSessionId) {
        // T·∫°o clientSessionId m·ªõi n·∫øu kh√¥ng c√≥
        clientSessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        console.log('T·∫°o clientSessionId m·ªõi:', clientSessionId);
      }
      
      console.log('üîç G·ªçi API next-question v·ªõi pinCode:', pinCode, 'clientSessionId:', clientSessionId);
      
              if (pinCode) {
        const nextQuestionData = await getNextQuestion(pinCode, clientSessionId);
        console.log('‚úÖ ƒê√£ l·∫•y c√¢u h·ªèi ti·∫øp theo:', nextQuestionData);
        
        // L∆∞u totalQuestions t·ª´ backend n·∫øu c√≥
        if (nextQuestionData.totalQuestions) {
          setTotalQuestionsFromBackend(nextQuestionData.totalQuestions);
          console.log('üìä Controller - Total questions t·ª´ getNextQuestion:', nextQuestionData.totalQuestions);
        }
        
        // C·∫≠p nh·∫≠t s·ªë c√¢u h·ªèi hi·ªán t·∫°i khi l·∫•y c√¢u m·ªõi
        const nextQuestionNum = currentQuestionNumber + 1;
        setCurrentQuestionNumber(nextQuestionNum);
        
        // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u h·ªèi cu·ªëi c√πng kh√¥ng
        const actualTotalQuestions = nextQuestionData.totalQuestions || totalQuestionsFromBackend || 4;
        const isReallyLastQuestion = nextQuestionNum >= actualTotalQuestions;
        
        console.log('üîç === CONTROLLER LAST QUESTION DEBUG ===');
        console.log('Question ID:', nextQuestionData.id);
        console.log('Backend questionLast flag:', nextQuestionData.questionLast);
        console.log('Current question number:', nextQuestionNum);
        console.log('Total questions:', actualTotalQuestions);
        console.log('Is really last question (calculated):', isReallyLastQuestion);
        console.log('Question content:', nextQuestionData.content);
        console.log('Question answers:', {
          A: nextQuestionData.answerA,
          B: nextQuestionData.answerB,
          C: nextQuestionData.answerC,
          D: nextQuestionData.answerD
        });
        console.log('All question data keys:', Object.keys(nextQuestionData));
        
        if (isReallyLastQuestion) {
          console.log('üèÅ ƒê√¢y l√† c√¢u h·ªèi cu·ªëi c√πng! G·ª≠i c√¢u h·ªèi cu·ªëi cho players...');
          
          // ‚úÖ QUAN TR·ªåNG: G·ª≠i c√¢u h·ªèi cu·ªëi cho players TR∆Ø·ªöC KHI setup timer
          console.log('üì° G·ª≠i c√¢u h·ªèi cu·ªëi c√πng cho t·∫•t c·∫£ players...');
          sendQuestionToPlayers(nextQuestionData, currentRoom.roomId);
          
          // L∆∞u d·ªØ li·ªáu c√¢u h·ªèi cu·ªëi v√†o localStorage ƒë·ªÉ GameResult c√≥ th·ªÉ s·ª≠ d·ª•ng
          localStorage.setItem('finalQuestionData', JSON.stringify(nextQuestionData));
          // ‚úÖ CHU·∫®N H√ìA: Ch·ªâ d√πng currentRoom, kh√¥ng l∆∞u roomInfo duplicate
          // isLastQuestion - kh√¥ng c·∫ßn l∆∞u localStorage, ch·ªâ l√† logic t·∫°m th·ªùi
          
          // ‚úÖ KH√îNG C·∫¶N l∆∞u finalRankingData - GameResult s·∫Ω g·ªçi API fresh
          console.log('üèÅ Controller final question setup (kh√¥ng l∆∞u ranking localStorage)');
          
          // C·∫≠p nh·∫≠t c√¢u h·ªèi hi·ªán t·∫°i ƒë·ªÉ Controller c≈©ng th·∫•y
          setCurrentQuestion(nextQuestionData);
          
          // Setup countdown cho c√¢u h·ªèi cu·ªëi nh∆∞ng KH√îNG hi·ªÉn th·ªã n√∫t "C√¢u ti·∫øp theo"
          const questionTime = nextQuestionData.limitedTime || 30;
          
          console.log('üîç Controller Final Question Timer Setup:', {
            receivedLimitedTime: nextQuestionData.limitedTime,
            fallbackTime: 30,
            finalQuestionTime: questionTime,
            hasLimitedTimeFromBackend: !!nextQuestionData.limitedTime,
            questionId: nextQuestionData.id,
            isFinalQuestion: true
          });
          
          setTimeLeft(questionTime);
          setIsQuestionActive(true);
          setTimerFinished(false);
          setShowNextQuestionButton(false); // Kh√¥ng hi·ªÉn th·ªã n√∫t cho c√¢u cu·ªëi
          setShowRanking(false);
          
          console.log('‚è∞ Controller ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi cu·ªëi:', questionTime, 'gi√¢y');
          console.log('üéØ Controller limitedTime t·ª´ backend cho c√¢u cu·ªëi:', nextQuestionData.limitedTime);
          console.log('üéØ C√¢u h·ªèi cu·ªëi ƒë√£ ƒë∆∞·ª£c g·ª≠i cho players');
          
          // ƒê·ª£i limitedTime + 7 gi√¢y ƒë·ªÉ ng∆∞·ªùi ch∆°i k·ªãp tr·∫£ l·ªùi v√† controller l·∫•y ranking cu·ªëi
          const waitTime = (nextQuestionData.limitedTime || 30) * 1000 + 7000; // limitedTime + 7s
          console.log(`‚è∞ S·∫Ω chuy·ªÉn ƒë·∫øn GameResult sau ${waitTime/1000} gi√¢y...`);
          
          setTimeout(() => {
            console.log('üöÄ Chuy·ªÉn ƒë·∫øn GameResult...');
            window.location.href = '/game-result';
          }, waitTime);
          
          return; // Kh√¥ng ti·∫øp t·ª•c x·ª≠ l√Ω c√¢u h·ªèi ti·∫øp theo
        }
        
        console.log('üéØ Controller nh·∫≠n c√¢u h·ªèi ti·∫øp theo:', {
          questionId: nextQuestionData.id,
          content: nextQuestionData.content,
          limitedTime: nextQuestionData.limitedTime
        });
        
        // G·ª≠i c√¢u h·ªèi ti·∫øp theo cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
        sendQuestionToPlayers(nextQuestionData, currentRoom.roomId);
        
        // Setup countdown cho c√¢u h·ªèi m·ªõi v·ªõi th·ªùi gian t·ª´ backend
        const questionTime = nextQuestionData.limitedTime || 30;
        
        console.log('üîç Controller Normal Question Timer Setup:', {
          receivedLimitedTime: nextQuestionData.limitedTime,
          fallbackTime: 30,
          finalQuestionTime: questionTime,
          hasLimitedTimeFromBackend: !!nextQuestionData.limitedTime,
          questionId: nextQuestionData.id,
          questionNumber: nextQuestionNum,
          isFinalQuestion: false
        });
        
        setTimeLeft(questionTime);
        setIsQuestionActive(true);
        setTimerFinished(false);
        
        // ·∫®n n√∫t v√† ranking cho c√¢u h·ªèi m·ªõi
        setShowNextQuestionButton(false);
        setShowRanking(false);
        
        // ‚úÖ RESET: Clear timer protection cho c√¢u h·ªèi m·ªõi
        window.correctTimerSet = false;
        window.correctTimerValue = null;
        console.log('üîì Reset timer protection for new question');
        
        // isLastQuestion - kh√¥ng c·∫ßn clear v√¨ kh√¥ng l∆∞u localStorage n·ªØa
        console.log('üßπ isLastQuestion logic - kh√¥ng d√πng localStorage n·ªØa');
        
        console.log('‚è∞ Controller b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c c√¢u h·ªèi s·ªë', nextQuestionNum, ':', questionTime, 'gi√¢y');
        console.log('üéØ Controller limitedTime t·ª´ backend:', nextQuestionData.limitedTime);
        
        // TODO: Emit event ho·∫∑c th√¥ng b√°o cho backend ƒë·ªÉ chuy·ªÉn c√¢u h·ªèi
        // C√≥ th·ªÉ s·ª≠ d·ª•ng WebSocket ho·∫∑c g·ªçi API kh√°c ƒë·ªÉ th√¥ng b√°o
        
        // Kh√¥ng c·∫ßn setTimeout n·ªØa v√¨ ƒë√£ c√≥ countdown timer t·ª± ƒë·ªông
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y c√¢u h·ªèi ti·∫øp theo:', error);
      alert('Kh√¥ng th·ªÉ l·∫•y c√¢u h·ªèi ti·∫øp theo. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // C·∫≠p nh·∫≠t joinCode khi component mount
  useEffect(() => {
    const code = getJoinCodeFromStorage();
    setJoinCode(code);
  }, []);

  // Thi·∫øt l·∫≠p WebSocket khi component mount
  useEffect(() => {
    console.log('üîå Setting up WebSocket...');
    setupWebSocket();
    
    // Cleanup WebSocket khi component unmount
    return () => {
      if (stompClient && stompClient.connected) {
        console.log('üîå Disconnecting WebSocket...');
        stompClient.disconnect();
        setIsConnected(false);
      }
    };
  }, []);

  // L·∫•y b·∫£ng x·∫øp h·∫°ng khi component mount
  useEffect(() => {
    // Reset question counter cho game m·ªõi  
    setCurrentQuestionNumber(1); // Reset v·ªÅ c√¢u 1 khi b·∫Øt ƒë·∫ßu game m·ªõi
    console.log('üßπ Reset currentQuestionNumber to 1 (kh√¥ng d√πng isLastQuestion localStorage)');
    
    // ‚úÖ RESET: Clear timer protection cho game m·ªõi
    window.correctTimerSet = false;
    window.correctTimerValue = null;
    console.log('üîì Reset timer protection for new game');
    
    // üìä ƒê·ªçc totalQuestions t·ª´ currentRoom (t·ª´ CreateRoom)
    const currentRoom = localStorage.getItem('currentRoom');
    if (currentRoom) {
      try {
        const roomData = JSON.parse(currentRoom);
        console.log('üîç Controller currentRoom data:', roomData);
        
        // Th·ª≠ nhi·ªÅu ngu·ªìn ƒë·ªÉ l·∫•y totalQuestions
        const totalFromRoom = roomData.totalQuestions;
        const totalFromSelectedQuiz = roomData.selectedQuiz?.questionCount;
        const finalTotal = totalFromRoom || totalFromSelectedQuiz || 4;
        
        setTotalQuestionsFromBackend(finalTotal);
        console.log('üìä Controller final totalQuestions:', finalTotal, 'from:', {
          totalFromRoom,
          totalFromSelectedQuiz,
          fallback: 4
        });
      } catch (error) {
        console.error('‚ùå Controller l·ªói khi parse currentRoom:', error);
        // Fallback
        setTotalQuestionsFromBackend(4);
        console.log('üìä Controller fallback totalQuestions: 4');
      }
    } else {
      // Fallback n·∫øu kh√¥ng c√≥ currentRoom
      setTotalQuestionsFromBackend(4);
      console.log('üìä Controller no currentRoom, fallback totalQuestions: 4');
    }
    
    // T·∫°o b·∫£ng x·∫øp h·∫°ng ban ƒë·∫ßu v·ªõi ƒëi·ªÉm 0 (fallback n·∫øu WebSocket ch∆∞a c√≥ data)
    createInitialRanking();
    
    // Ki·ªÉm tra c√¢u h·ªèi ƒë·∫ßu ti√™n t·ª´ WaitingRoom
    const firstQuestion = localStorage.getItem('firstQuestionData');
    
    console.log('üîç CONTROLLER MOUNT DEBUG - localStorage check:', {
      hasFirstQuestion: !!firstQuestion,
      hasWindowFlag: window.firstQuestionReceived === true,
      firstQuestionLength: firstQuestion ? firstQuestion.length : 0,
      firstQuestionPreview: firstQuestion ? firstQuestion.substring(0, 100) : 'null'
    });

    if (firstQuestion) {
      try {
        const questionData = JSON.parse(firstQuestion);
        console.log('üéØ Controller load c√¢u h·ªèi ƒë·∫ßu ti√™n t·ª´ WaitingRoom:', {
          questionId: questionData.id,
          content: questionData.content,
          limitedTime: questionData.limitedTime,
          timeToCountdown: questionData.limitedTime || 30
        });
        
        // Ch·ªâ l∆∞u v√† setup countdown, KH√îNG hi·ªÉn th·ªã UI c√¢u h·ªèi
        localStorage.setItem('currentQuestionData', firstQuestion);
        
        // Setup countdown timer
        const questionTime = questionData.limitedTime || 30;
        
        console.log('üîç Controller localStorage Timer Setup:', {
          receivedLimitedTime: questionData.limitedTime,
          fallbackTime: 30,
          finalQuestionTime: questionTime,
          hasLimitedTimeFromBackend: !!questionData.limitedTime,
          source: 'firstQuestionData t·ª´ WaitingRoom'
        });
        
        // ‚úÖ FORCE: ƒê·∫£m b·∫£o d√πng th·ªùi gian t·ª´ question data
        if (questionData.limitedTime && questionData.limitedTime !== 30) {
          console.log('üïê FORCING timer t·ª´ question data:', questionData.limitedTime, 'gi√¢y (kh√¥ng ph·∫£i 30s fallback)');
          setTimeLeft(questionData.limitedTime);
          
          // ‚úÖ PROTECTION: Prevent timer override
          window.correctTimerSet = true;
          window.correctTimerValue = questionData.limitedTime;
          console.log('üõ°Ô∏è Protected timer value:', questionData.limitedTime);
        } else {
          console.log('üïê Using fallback timer:', questionTime, 'gi√¢y');
          setTimeLeft(questionTime);
        }
        
        setIsQuestionActive(true);
        setTimerFinished(false);
        
        // ·∫®n ranking v√† n√∫t khi c√≥ c√¢u h·ªèi
        setShowRanking(false);
        setShowNextQuestionButton(false);
        
        // ‚úÖ KH√îNG X√ìA localStorage - gi·ªØ l·∫°i cho debug
        // localStorage.removeItem('firstQuestionReceived'); // COMMENTED OUT
        
        console.log('‚úÖ Controller b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c t·ª´ localStorage:', questionTime, 'gi√¢y');
      } catch (error) {
        console.error('‚ùå L·ªói khi parse c√¢u h·ªèi ƒë·∫ßu ti√™n:', error);
        console.error('‚ùå Raw firstQuestion data:', firstQuestion);
        
        // Fallback n·∫øu parse error: d√πng timer m·∫∑c ƒë·ªãnh
        console.log('üîß Parse error fallback: setup timer 30s');
        setTimeLeft(30);
        setIsQuestionActive(true);
        setTimerFinished(false);
        setShowRanking(false);
        setShowNextQuestionButton(false);
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ firstQuestionData trong localStorage');
      console.log('üîç Debug localStorage flags:', {
        firstQuestion: !!localStorage.getItem('firstQuestionData'),
        windowFlag: window.firstQuestionReceived === true,
        currentQuestionData: !!localStorage.getItem('currentQuestionData')
      });
      
      // Fallback: ki·ªÉm tra localStorage c≈©
      const savedQuestion = localStorage.getItem('currentQuestionData');
      if (savedQuestion) {
        try {
          const questionData = JSON.parse(savedQuestion);
          console.log('üìö Fallback load c√¢u h·ªèi t·ª´ localStorage c≈©:', questionData);
          console.log('üîç Fallback timer setup:', {
            limitedTime: questionData.limitedTime,
            hasLimitedTime: !!questionData.limitedTime
          });
          setCurrentQuestion(questionData);
          
          // Setup timer cho fallback n·∫øu c·∫ßn
          if (questionData.limitedTime) {
            console.log('‚è∞ Setup timer t·ª´ fallback localStorage:', questionData.limitedTime);
            setTimeLeft(questionData.limitedTime);
            setIsQuestionActive(true);
            setTimerFinished(false);
            setShowRanking(false);
            setShowNextQuestionButton(false);
            console.log('‚úÖ Controller fallback timer setup completed:', questionData.limitedTime, 'gi√¢y');
          }
        } catch (error) {
          console.error('‚ùå L·ªói khi parse c√¢u h·ªèi t·ª´ localStorage:', error);
        }
      } else {
        console.warn('‚ùå CONTROLLER KH√îNG C√ì C√ÇU H·ªéI N√ÄO! Setup fallback timer 30s');
        
        // Setup fallback timer 30 gi√¢y
        console.log('üîß Setting up fallback timer: 30 seconds');
        setTimeLeft(30);
        setIsQuestionActive(true);
        setTimerFinished(false);
        setShowRanking(false);
        setShowNextQuestionButton(false);
        
        console.log('‚úÖ Controller b·∫Øt ƒë·∫ßu ƒë·∫øm ng∆∞·ª£c fallback: 30 gi√¢y');
      }
    }
    
    console.log('üöÄ ƒê√£ v√†o PlayRoomForController, c√¢u h·ªèi ƒë·∫ßu ti√™n ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ª´ WaitingRoom');
    
  }, []); // B·ªè dependency joinCode ƒë·ªÉ kh√¥ng t·∫°o l·∫°i interval

  // Countdown timer cho c√¢u h·ªèi hi·ªán t·∫°i
  useEffect(() => {
    if (!isQuestionActive || timerFinished) return;
    
    console.log('üïê TIMER EFFECT STARTING:', {
      timeLeft: timeLeft,
      isQuestionActive: isQuestionActive,
      timerFinished: timerFinished,
      currentQuestionNumber: currentQuestionNumber,
      totalQuestions: totalQuestionsFromBackend
    });
    
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          // ƒê√°nh d·∫•u timer ƒë√£ k·∫øt th√∫c nh∆∞ng v·∫´n hi·ªÉn th·ªã 0s
          setTimerFinished(true);
          setShowRanking(true);
          
          // Ki·ªÉm tra xem c√≥ ph·∫£i c√¢u cu·ªëi c√πng kh√¥ng - d√πng s·ªë c√¢u th·ª±c t·∫ø
          const actualTotalQuestions = totalQuestionsFromBackend || 4;
          const isReallyLastQuestion = currentQuestionNumber >= actualTotalQuestions;

          if (isReallyLastQuestion) {
            console.log('üèÅ C√¢u cu·ªëi c√πng k·∫øt th√∫c, l·∫•y ranking cu·ªëi c√πng...');
            setShowNextQuestionButton(false);
            
            // L·∫§Y RANKING CU·ªêI C√ôNG cho c√¢u cu·ªëi
            const fetchFinalRanking = async () => {
              try {
                console.log('üìä Controller l·∫•y b·∫£ng x·∫øp h·∫°ng cu·ªëi c√πng...');
                
                // ‚úÖ KH√îNG C·∫¶N l∆∞u finalRankingData - GameResult s·∫Ω g·ªçi API fresh
                console.log('üèÅ Controller timer finished for final question (kh√¥ng l∆∞u ranking localStorage)');
                
              } catch (error) {
                console.error('‚ùå L·ªói khi l·∫•y ranking cu·ªëi c√πng:', error);
              }
            };
            
            // G·ªçi fetchFinalRanking ngay l·∫≠p t·ª©c
            fetchFinalRanking();
            
            // R√∫t ng·∫Øn th·ªùi gian ch·ªù xu·ªëng 5s cho c√¢u cu·ªëi
            setTimeout(() => {
              console.log('üöÄ Chuy·ªÉn ƒë·∫øn GameResult sau 5s...');
              window.location.href = '/game-result';
            }, 5000);
          } else {
            setShowNextQuestionButton(true);
          }
          return 0;
        }
        return prev - 1;
      });
    }, 1000);
    
    return () => clearInterval(timer);
  }, [isQuestionActive, timerFinished]);

  return (
    <div className="h-[calc(100vh-56px)] flex flex-col items-center pt-8 px-4 font-content space-y-6">
      {/* M√£ tham gia + ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c */}
      <div className="flex items-center gap-4">
        <div className="bg-white border-2 border-[var(--pink)] rounded-lg px-4 py-2 text-black text-2xl text-center">
          {joinCode}
        </div>
        
        {/* ƒê·ªìng h·ªì ƒë·∫øm ng∆∞·ª£c - lu√¥n hi·ªÉn th·ªã */}
        <div className="bg-white border-2 border-blue-500 rounded-lg px-4 py-2 flex items-center gap-2">
          <span className={`text-2xl font-bold ${timeLeft <= 10 ? 'text-red-500' : timeLeft === 0 ? 'text-gray-500' : 'text-blue-600'}`}>
            {timeLeft}s
          </span>
        </div>
      </div>

      {/* B·∫£ng x·∫øp h·∫°ng */}
      <div className="w-full max-w-4xl">
        {loading ? (
          <div className="text-center text-gray-500 py-20">
            <div className="text-2xl mb-2">üìä</div>
            <div>ƒêang t·∫£i b·∫£ng x·∫øp h·∫°ng...</div>
          </div>
        ) : rankingData.length > 0 ? (
          <>
            <RankingTable data={rankingData} totalQuestions={totalQuestionsFromBackend || 4} />
          </>
        ) : (
          <div className="text-center text-gray-500 py-20">
            <div className="text-2xl mb-2">üìä</div>
            <div>Ch∆∞a c√≥ d·ªØ li·ªáu x·∫øp h·∫°ng</div>
          </div>
        )}
      </div>

      {/* N√∫t "C√¢u ti·∫øp theo" - ch·ªâ hi·ªÉn th·ªã khi h·∫øt th·ªùi gian */}
      {showNextQuestionButton && (
        <div className="text-center">
          <button
            onClick={handleNextQuestion}
            className="bg-pink-500 hover:bg-blue-600 text-white font-bold py-3 px-8 rounded-lg text-lg transition-colors duration-200 shadow-lg"
          >
            C√¢u ti·∫øp theo ‚Üí
          </button>
        </div>
      )}

      <div className="w-full max-w-3xl mx-auto">
        <Chat />
      </div>
    </div>
  );
}