import React, { useState, useRef, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'



const CreateRoom = ({ onClose }) => {
  const navigate = useNavigate();
  const [topic, setTopic] = useState('')
  const [showTopicDropdown, setShowTopicDropdown] = useState(false)
  const [search, setSearch] = useState('')
  const [showSuggestDropdown, setShowSuggestDropdown] = useState(false)
  const [questionSets, setQuestionSets] = useState([])
  const [selectedQuiz, setSelectedQuiz] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [searchLoading, setSearchLoading] = useState(false)
  const [topicSuggestions, setTopicSuggestions] = useState([])
  const [topicLoading, setTopicLoading] = useState(false)
  const topicInputRef = useRef(null)
  const searchInputRef = useRef(null)
  
  // Debounce timer cho search
  const searchTimeoutRef = useRef(null)
  const topicTimeoutRef = useRef(null)

  // H√†m l·∫•y t·∫•t c·∫£ topics t·ª´ API
  const loadAllTopics = async () => {
    setTopicLoading(true)
    try {
      const token = localStorage.getItem('token')
      if (!token) {
        setTopicSuggestions([])
        return
      }

      // L·∫•y t·∫•t c·∫£ quiz ƒë·ªÉ extract topics
      const response = await fetch(`http://localhost:8080/api/questions/all?page=0&size=100`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        // L·∫•y danh s√°ch topics unique t·ª´ t·∫•t c·∫£ quiz
        const topics = [...new Set(data.data?.map(quiz => quiz.topic).filter(Boolean))]
        setTopicSuggestions(topics)
      } else {
        setTopicSuggestions([])
      }
    } catch (error) {
      console.error('Error loading topics:', error)
      setTopicSuggestions([])
    } finally {
      setTopicLoading(false)
    }
  }

  // H√†m t√¨m ki·∫øm topics t·ª´ API
  const searchTopics = async (topicTerm) => {
    if (!topicTerm.trim()) {
      // N·∫øu kh√¥ng c√≥ search term, load t·∫•t c·∫£ topics
      await loadAllTopics()
      return
    }

    setTopicLoading(true)
    try {
      const token = localStorage.getItem('token')
      if (!token) {
        setTopicSuggestions([])
        return
      }

      // T√¨m ki·∫øm quiz theo topic ƒë·ªÉ l·∫•y c√°c topic c√≥ s·∫µn
      const params = new URLSearchParams()
      params.append('topic', topicTerm.trim())
      params.append('page', '0')
      params.append('size', '50')

      const response = await fetch(`http://localhost:8080/api/questions/search?${params.toString()}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        // L·∫•y danh s√°ch topics unique t·ª´ k·∫øt qu·∫£
        const topics = [...new Set(data.data?.map(quiz => quiz.topic).filter(Boolean))]
        
        // L·ªçc topics theo search term
        const filteredTopics = topics.filter(t => 
          t.toLowerCase().includes(topicTerm.toLowerCase())
        )
        
        setTopicSuggestions(filteredTopics.slice(0, 15))
      } else {
        setTopicSuggestions([])
      }
    } catch (error) {
      console.error('Error searching topics:', error)
      setTopicSuggestions([])
    } finally {
      setTopicLoading(false)
    }
  }

  // H√†m t√¨m ki·∫øm quiz t·ª´ API
  const searchQuizzes = async (searchTerm, topicFilter = '') => {
    if (!searchTerm.trim()) {
      setQuestionSets([])
      return
    }

    setSearchLoading(true)
    try {
      const token = localStorage.getItem('token')
      if (!token) {
        setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t√¨m ki·∫øm b·ªô c√¢u h·ªèi')
        return
      }

      const params = new URLSearchParams()
      if (searchTerm.trim()) params.append('name', searchTerm.trim())
      if (topicFilter.trim()) params.append('topic', topicFilter.trim())
      params.append('page', '0')
      params.append('size', '10')

      const response = await fetch(`http://localhost:8080/api/questions/search?${params.toString()}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const data = await response.json()
        console.log('Search API response:', data)
        console.log('Question sets data:', data.data)
        setQuestionSets(data.data || [])
        setError('')
      } else {
        console.error('L·ªói khi t√¨m ki·∫øm:', response.status)
        setError('Kh√¥ng th·ªÉ t√¨m ki·∫øm b·ªô c√¢u h·ªèi')
      }
    } catch (error) {
      console.error('Error searching quizzes:', error)
      setError('L·ªói k·∫øt n·ªëi khi t√¨m ki·∫øm')
    } finally {
      setSearchLoading(false)
    }
  }

  // H√†m t·∫°o ph√≤ng
  const handleCreateRoom = async () => {
    if (!selectedQuiz) {
      setError('Vui l√≤ng ch·ªçn m·ªôt b·ªô c√¢u h·ªèi')
      return
    }

    // S·ª≠ d·ª•ng quizId thay v√¨ id v√¨ API tr·∫£ v·ªÅ quizId
    const quizId = selectedQuiz.quizId || selectedQuiz.id
    if (!quizId) {
      console.error('Selected quiz structure:', selectedQuiz)
      setError('B·ªô c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn kh√¥ng c√≥ ID h·ª£p l·ªá. Vui l√≤ng ch·ªçn l·∫°i.')
      return
    }

    console.log('Creating room with quiz:', selectedQuiz)
    console.log('Quiz ID:', quizId)
    console.log('Quiz topic:', selectedQuiz.quizTopic || selectedQuiz.topic)
    console.log('Quiz structure keys:', Object.keys(selectedQuiz))

    setLoading(true)
    setError('')
    
    try {
      const token = localStorage.getItem('token')
      if (!token) {
        setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o ph√≤ng')
        return
      }

      const response = await fetch(`http://localhost:8080/rooms/create?quizId=${quizId}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      })

      if (response.ok) {
        const roomData = await response.json()
        console.log('Ph√≤ng ƒë√£ ƒë∆∞·ª£c t·∫°o:', roomData)
        console.log('Room ID:', roomData.id)
        console.log('Room keys:', Object.keys(roomData))
        
        // Ki·ªÉm tra roomId c√≥ t·ªìn t·∫°i kh√¥ng
        const roomId = roomData.roomId || roomData.id || roomData.room?.id
        console.log('Extracted roomId:', roomId)
        
        if (!roomId) {
          setError('Kh√¥ng th·ªÉ l·∫•y ID ph√≤ng t·ª´ response')
          return
        }
        
        // ƒê√≥ng modal v√† chuy·ªÉn ƒë·∫øn trang ph√≤ng ch·ªù cho controller
        if (onClose) onClose()
        navigate(`/waiting-room-for-controller/${roomId}`)
      } else {
        console.log('Create room failed with status:', response.status)
        const errorData = await response.text()
        console.log('Error response from backend:', errorData)
        
        // X·ª≠ l√Ω message c·ª• th·ªÉ 
        if (errorData.includes('B·∫°n ƒëang ·ªü trong m·ªôt ph√≤ng kh√°c')) {
          setError(`‚ùå B·∫°n ƒëang ·ªü trong m·ªôt ph√≤ng kh√°c!\n\nüîπ Vui l√≤ng tho√°t kh·ªèi ph√≤ng hi·ªán t·∫°i tr∆∞·ªõc khi t·∫°o ph√≤ng m·ªõi.\nüîπ Ho·∫∑c ki·ªÉm tra xem b·∫°n c√≥ ƒëang ·ªü trong ph√≤ng ch·ªù n√†o kh√¥ng.\nüîπ C√≥ th·ªÉ refresh trang ƒë·ªÉ reset tr·∫°ng th√°i.`)
        } else if (errorData.includes('Quiz kh√¥ng t·ªìn t·∫°i')) {
          setError('‚ùå B·ªô c√¢u h·ªèi ƒë∆∞·ª£c ch·ªçn kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ch·ªçn b·ªô c√¢u h·ªèi kh√°c.')
        } else {
          setError(errorData || '‚ùå Kh√¥ng th·ªÉ t·∫°o ph√≤ng')
        }
      }
    } catch (error) {
      console.error('Error creating room:', error)
      setError('L·ªói k·∫øt n·ªëi khi t·∫°o ph√≤ng')
    } finally {
      setLoading(false)
    }
  }

  // Debounced search effect cho quiz
  useEffect(() => {
    if (searchTimeoutRef.current) {
      clearTimeout(searchTimeoutRef.current)
    }

    searchTimeoutRef.current = setTimeout(() => {
      if (search.trim()) {
        searchQuizzes(search, topic)
      } else {
        // N·∫øu kh√¥ng c√≥ search term, v·∫´n gi·ªØ quiz ƒë√£ ch·ªçn
        // setQuestionSets([])
      }
    }, 500)

    return () => {
      if (searchTimeoutRef.current) {
        clearTimeout(searchTimeoutRef.current)
      }
    }
  }, [search, topic])

  // Debounced search effect cho topic
  useEffect(() => {
    if (topicTimeoutRef.current) {
      clearTimeout(topicTimeoutRef.current)
    }

    topicTimeoutRef.current = setTimeout(() => {
      searchTopics(topic)
    }, 300)

    return () => {
      if (topicTimeoutRef.current) {
        clearTimeout(topicTimeoutRef.current)
      }
    }
  }, [topic])

  // Load all topics from API on mount
  useEffect(() => {
    loadAllTopics()
  }, [])

  return (
    <div className="flex items-center justify-center min-h-screen w-full fixed inset-0 z-50">
      {/* Overlay */}
      <div className="fixed inset-0 bg-black bg-opacity-50 z-40" />
      {/* Popup */}
      <div className="bg-white rounded-xl shadow-xl w-full max-w-md p-6 relative z-50">
        {/* Close button */}
        <button
          className="absolute top-4 right-4 text-black text-xl font-bold"
          onClick={() => onClose ? onClose() : navigate('/dashboard')}
          aria-label="ƒê√≥ng"
        >
          &times;
        </button>

        {/* Header */}
        <div className="flex items-center gap-2 mb-6">
          <span className="text-[#ED005D] text-xl font-semibold">‚ûï T·∫°o ph√≤ng</span>
        </div>

        {/* Error Message */}
        {error && (
          <div className="mb-4 p-3 bg-red-100 border border-red-300 text-red-700 rounded-md text-sm">
            {error}
          </div>
        )}

        {/* Ch·ªß ƒë·ªÅ */}
        <div className="mb-4 relative" id="topic-block">
          <label className="block text-sm font-semibold text-[#ED005D] mb-1">Ch·ªß ƒë·ªÅ</label>
          <input
            type="text"
            ref={topicInputRef}
            value={topic}
            onChange={e => { setTopic(e.target.value); setShowTopicDropdown(true); }}
            onFocus={() => {
              setShowTopicDropdown(true);
              // N·∫øu ch∆∞a c√≥ topic suggestions, load l·∫°i t·ª´ API
              if (topicSuggestions.length === 0) {
                loadAllTopics();
              }
            }}
            onBlur={() => setTimeout(() => setShowTopicDropdown(false), 100)}
            placeholder="Nh·∫≠p/ch·ªçn ch·ªß ƒë·ªÅ..."
            className="w-full border border-[#ED005D] rounded-md py-2 pl-10 pr-8 bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#ED005D] text-black"
          />
          {/* Icon b√™n tr√°i */}
          <div className="absolute top-1/2 left-3 transform -translate-y-1/2 text-[#ED005D] select-none pointer-events-none">üìÑ</div>
          
          {/* Loading indicator cho topic search */}
          {topicLoading ? (
            <div className="absolute top-1/2 right-3 transform -translate-y-1/2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-[#ED005D]"></div>
            </div>
          ) : (
            /* M≈©i t√™n */
            <div className="absolute top-1/2 right-3 transform -translate-y-1/2 pointer-events-none">
              <svg className="h-4 w-4 text-gray-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" /></svg>
            </div>
          )}
          
          {/* Dropdown g·ª£i √Ω ch·ªß ƒë·ªÅ t·ª´ API */}
          {showTopicDropdown && (
            <div className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md max-h-40 overflow-y-auto scrollbar-thin shadow">
              {topicSuggestions.length > 0 ? (
                topicSuggestions.map((topicItem, i) => (
                  <div
                    key={i}
                    className="px-4 py-2 hover:bg-gray-100 cursor-pointer text-black flex items-center justify-between"
                    onMouseDown={e => { 
                      setTopic(topicItem); 
                      setShowTopicDropdown(false); 
                      // Trigger search cho quiz v·ªõi topic m·ªõi
                      if (search.trim()) {
                        searchQuizzes(search, topicItem)
                      }
                      e.preventDefault(); 
                    }}
                  >
                    <span>{topicItem}</span>
                    <div className="text-xs text-gray-500">üìö</div>
                  </div>
                ))
              ) : (
                <div className="px-4 py-2 text-gray-500 text-sm">
                  {topicLoading ? 'ƒêang t√¨m ki·∫øm ch·ªß ƒë·ªÅ...' : 'Kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ n√†o'}
                </div>
              )}
            </div>
          )}
        </div>

        {/* T√¨m ki·∫øm b·ªô c√¢u h·ªèi */}
        <div className="mb-4 relative" id="search-block">
          <label className="block text-sm font-semibold text-[#ED005D] mb-1">
            Nh·∫≠p t√™n b·ªô c√¢u h·ªèi <span className="text-red-500">*</span>
          </label>
          <div className="text-xs text-gray-600 mb-2">
            G√µ ƒë·ªÉ t√¨m ki·∫øm v√† ch·ªçn m·ªôt b·ªô c√¢u h·ªèi t·ª´ danh s√°ch
          </div>
          <input
            type="text"
            ref={searchInputRef}
            value={search}
            onChange={e => { 
              setSearch(e.target.value); 
              setShowSuggestDropdown(e.target.value.trim() !== '');
              // Kh√¥ng reset selectedQuiz khi g√µ ƒë·ªÉ gi·ªØ quiz ƒë√£ ch·ªçn
              // setSelectedQuiz(null); 
            }}
            onFocus={() => { if (search.trim() !== '') setShowSuggestDropdown(true); }}
            onBlur={() => setTimeout(() => setShowSuggestDropdown(false), 100)}
            placeholder={selectedQuiz ? "ƒê√£ ch·ªçn quiz, g√µ ƒë·ªÉ t√¨m quiz kh√°c..." : "T√¨m ki·∫øm b·ªô c√¢u h·ªèi..."}
            className="w-full border border-[#ED005D] rounded-md py-2 px-3 bg-gray-50 focus:outline-none focus:ring-2 focus:ring-[#ED005D] text-black"
          />
          
          {/* Loading indicator cho search */}
          {searchLoading && (
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-[#ED005D]"></div>
            </div>
          )}
          
          {/* Dropdown g·ª£i √Ω t·ª´ API */}
          {showSuggestDropdown && (
            <div className="absolute z-10 mt-1 w-full bg-white border border-gray-300 rounded-md max-h-40 overflow-y-auto scrollbar-thin shadow">
              {questionSets.length > 0 ? (
                questionSets.map((quiz, i) => (
                  <div
                    key={quiz.quizId || quiz.id || i}
                    className={`flex items-center justify-between px-4 py-2 hover:bg-gray-100 cursor-pointer text-black ${
                      selectedQuiz?.quizId === quiz.quizId || selectedQuiz?.id === quiz.id ? 'bg-blue-50 border-l-4 border-[#ED005D]' : ''
                    }`}
                    onMouseDown={e => { 
                      setSearch(quiz.name || quiz.quizName || 'B·ªô c√¢u h·ªèi'); 
                      setSelectedQuiz(quiz);
                      setShowSuggestDropdown(false); 
                      setError('');
                      // Clear search input ƒë·ªÉ hi·ªÉn th·ªã quiz ƒë√£ ch·ªçn
                      setSearch('');
                      e.preventDefault(); 
                    }}
                  >
                    <div className="flex flex-col">
                      <span className="font-medium">{quiz.name || quiz.quizName || 'B·ªô c√¢u h·ªèi kh√¥ng c√≥ t√™n'}</span>
                      <span className="text-xs text-gray-500">{quiz.quizTopic || quiz.topic || 'Kh√¥ng c√≥ topic'}</span>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-gray-600">
                      <span className="text-xs text-gray-400">{quiz.quantityQuestion || quiz.questions?.length || 0} c√¢u h·ªèi</span>
                      <div className="w-5 h-5 rounded-full bg-[#ED005D] text-white text-xs flex items-center justify-center">
                        Q
                      </div>
                    </div>
                  </div>
                ))
              ) : (
                <div className="px-4 py-2 text-gray-500 text-sm">
                  {searchLoading ? 'ƒêang t√¨m ki·∫øm...' : 'Kh√¥ng t√¨m th·∫•y b·ªô c√¢u h·ªèi n√†o'}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Th√¥ng tin quiz ƒë√£ ch·ªçn */}
        {selectedQuiz && (
          <div className="mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
            <div className="flex items-center gap-2">
              <div className="w-6 h-6 rounded-full bg-green-500 text-white text-xs flex items-center justify-center">
                ‚úì
              </div>
              <div className="flex-1">
                <div className="font-medium text-green-800">{selectedQuiz.name || selectedQuiz.quizName || 'B·ªô c√¢u h·ªèi kh√¥ng c√≥ t√™n'}</div>
                <div className="text-sm text-green-600">{selectedQuiz.quizTopic || selectedQuiz.topic || 'Kh√¥ng c√≥ topic'}</div>
                <div className="text-xs text-green-500">{selectedQuiz.quantityQuestion || selectedQuiz.questions?.length || 0} c√¢u h·ªèi</div>
              </div>
              <button
                onClick={() => {
                  setSelectedQuiz(null)
                  setSearch('')
                  setError('')
                }}
                className="text-red-500 hover:text-red-700 text-sm"
                title="B·ªè ch·ªçn quiz n√†y"
              >
                ‚úï
              </button>
            </div>
          </div>
        )}

        {/* N√∫t t·∫°o ph√≤ng */}
        <button 
          onClick={handleCreateRoom}
          disabled={loading || !selectedQuiz}
          className={`w-full mt-2 py-2 px-4 rounded-md font-semibold transition-all duration-200 ${
            loading || !selectedQuiz
              ? 'bg-gray-400 cursor-not-allowed text-gray-200'
              : 'bg-[#ED005D] hover:bg-pink-700 text-white hover:shadow-lg'
          }`}
        >
          {loading ? (
            <div className="flex items-center justify-center gap-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ƒêang t·∫°o ph√≤ng...
            </div>
          ) : (
            'T·∫°o ph√≤ng'
          )}
        </button>
      </div>
    </div>
  )
}

export default CreateRoom 
